doParallel,foreach, ranger,caret,blockCV,vip,hydroGOF,caretEnsemble,CAST,gfcanalysis)
library(gbm)
tempdir()
## Preliminaries and global variables
#install.packages('pacman')
#.libPaths( "C:/Program Files/R/R-4.0.2/library")
pacman::p_load(rgdal,terra,reshape2,ggplot2,Metrics,gridExtra, plyr,dplyr,rgeos,ggpubr,gridExtra,
doParallel,foreach,pdp, ranger,caret,blockCV,vip,hydroGOF,caretEnsemble,CAST,gfcanalysis)
.libPaths()
.libpat
.libPaths()
## Preliminaries and global variables
#install.packages('pacman')
#.libPaths( "C:/Program Files/R/R-4.0.2/library")
pacman::p_load(rgdal,terra,reshape2,ggplot2,Metrics,gridExtra, plyr,dplyr,rgeos,ggpubr,gridExtra,
doParallel,foreach,pdp, ranger,caret,blockCV,vip,hydroGOF,caretEnsemble,CAST,gfcanalysis)
## Preliminaries and global variables
#install.packages('pacman')
#.libPaths( "C:/Program Files/R/R-4.0.2/library")
pacman::p_load(rgdal,terra,reshape2,ggplot2,Metrics,gridExtra, plyr,dplyr,rgeos,ggpubr,gridExtra,
doParallel,foreach,pdp, ranger,caret,blockCV,vip,hydroGOF,caretEnsemble,CAST,gfcanalysis)
## Preliminaries and global variables
#install.packages('pacman')
.libPaths( "C:/Program Files/R/R-4.0.2/library")
pacman::p_load(rgdal,terra,reshape2,ggplot2,Metrics,gridExtra, plyr,dplyr,rgeos,ggpubr,gridExtra,
doParallel,foreach,pdp, ranger,caret,blockCV,vip,hydroGOF,caretEnsemble,CAST,gfcanalysis)
pacman::p_load(rgdal,terra,reshape2,ggplot2,Metrics,gridExtra, plyr,dplyr,rgeos,ggpubr,gridExtra,
doParallel,foreach,pdp, ranger,caret,blockCV,vip,hydroGOF,caretEnsemble,CAST,gfcanalysis)
pacman::p_load(rgdal,terra,reshape2,ggplot2,Metrics,gridExtra, plyr,dplyr,rgeos,ggpubr,gridExtra,
doParallel,foreach,pdp, ranger,caret,blockCV,vip,hydroGOF,caretEnsemble,CAST,gfcanalysis)
.libPaths( "C:/R")
install.packages('pacman')
install.packages("pacman")
getwd()
.libPaths()
library(CAST)
?CreateSpacetimeFolds
## Preliminaries and global variables
#install.packages('pacman')
#.libPaths( "C:/Program Files/R/R-4.0.2/library")
.libPaths( "C:/R")
pacman::p_load(rgdal,raster,terra,reshape2,ggplot2,Metrics,plyr,dplyr,sf,corrplot,
rgeos,ggpubr,gridExtra,doParallel,foreach,pdp,ranger,caret,
blockCV,vip,hydroGOF,CAST,fastshap,rasterVis,ggnewscale)
lcov
library(caretEnsemble)
?caretList
## Preliminaries and global variables
#install.packages('pacman')
#.libPaths( "C:/Program Files/R/R-4.0.2/library")
.libPaths( "C:/R")
#library(caret)
library(terra)
library(ranger)
library(raster)
terra
?terra
#library(caret)
library(raster)
unpack(raster)
unload(raster)
tempdir()
?focal
123 * 0
123 * 1
123 * .4
## Preliminaries and global variables
#install.packages('pacman')
pacman::p_load(rgdal,raster,terra,reshape2,ggplot2,Metrics,plyr,dplyr,sf,corrplot,
rgeos,ggpubr,gridExtra,doParallel,foreach,pdp,ranger,caret,lattice,automap,
blockCV,vip,hydroGOF,CAST,fastshap,rasterVis,ggnewscale,tidyverse,
caretEnsemble,viridis,gdalUtilities)
mainDir <- 'C:/SEEA_RS'
outDir <- 'C:/SEEA_RS/results'
dataDir <- 'C:/SEEA_RS/data'
setwd(dataDir)
## Covariates rasters and reference data
ref <- read.csv('refLiDAR_deltaAGB_BRA.csv')
covs <- rast('covs_samp.tif')
## Covariates rasters and reference data
ref <- read.csv('refLiDAR_deltaAGB_BRA.csv')
setwd(dataDir)
## Covariates rasters and reference data
ref <- read.csv('refLiDAR_deltaAGB_BRA.csv')
covs <- rast('covs_samp.tif')
## Function to graph collinearity among covaraites
Corrplot(covs)
########### FUNCTIONS ---------------------------
## Corrplot
Corrplot <-function(covs){
set.seed(12)
str <- deparse(substitute(covs))
samp <- spatSample(covs, 5000)
samp <- na.omit(samp)
cor <- cor(samp)
cor[is.na(cor)] <- 0
setwd(outDir)
png(height=800, width=800, file=paste0(str,".png"), type='cairo')
corrplot(cor, method='number')
dev.off()
setwd(dataDir)
cor
}
## Function to graph collinearity among covaraites
Corrplot(covs)
## Function to graph collinearity among covaraites
Corrplot(covs)
names(covs)
## Dissimilarity index for HPC runs of AOA
PseudoSamp(ref, covs, F)
## Function to map under-sampled areas and pseudo-sample "no change" and "loss" data
PseudoSamp <- function(df=usa_ref,covs=covs,DI_only=T){
str <- deparse(substitute(covs))
str1 <- deparse(substitute(df))
print(str)
df <- df[, !(colnames(df) %in% c('fmask','defo'))]
df$diffPlt <- df$AGB_T_HA_2018 - df$AGB_T_HA_2010
exc <- c('diff_lvod','flii_envi','mgmt_mgmt', 'TC_envi','height_envi',
'forType_envi', 'diff_jpl','bio_climate','forType_envi')
# use all covs for feature space analysis
p <- vect(df, geom=c("POINT_X", "POINT_Y"))
print(paste(nrow(df), 'total plots'))
df.covs <- terra::extract(covs, p)[,-1]
df <- data.frame(df, df.covs)
print(paste(nrow(df), 'total plots after masking'))
df <- df[, !(colnames(df) %in% exc)]
df <- na.omit(df)
#clustering of ref data
df <- SpatialFolds(df, str)
folds <- CreateSpacetimeFolds(df, spacevar='folds',k=length(unique(df$folds)))
nms <- setdiff(names(covs),exc)
unregister_dopar()
if (grepl('nld',str)==T){
model <- train(df[,which(names(df) %in% nms)],
df$diffPlt, method="rf", importance=TRUE,tuneLength = 5,
trControl=trainControl(method="cv",number=5,savePredictions=T))
}else{
model <- train(df[,which(names(df) %in% nms)],
df$diffPlt, method="rf", importance=TRUE,tuneLength = 5,
trControl = trainControl(method="cv",index=folds$index))
}
print(model)
#if (file.exists( paste0(str,'_DI.rds')) == F  ){
DI <- trainDI(model=model)
plot(DI)
if (grepl('1', str1) == T){
saveRDS(DI, paste0(str1, '_',str,'_DI.rds'))
}else{    saveRDS(DI, paste0(str,'_DI.rds'))  }
#}else{DI <- readRDS(paste0(str,'_DI.rds'))}
if (DI_only != T){
cl <- makeCluster(6)
registerDoParallel(cl)
AOA <- aoa(covs, model = model, trainDI = DI,cl=cl) #saving AOA not working!
stopCluster(cl)
msk <-  AOA$AOA
msk [msk==1] <- NA
under_samp <- terra::mask(covs[[1]],msk)
under_samp[!is.na(under_samp)] <- 1
plot(under_samp, main='Under-sampled areas', col='red')
plot(p,add=T)
writeRaster(under_samp, paste0(str, '_underSamp_noPseudo.tif'),overwrite=T)
if (grepl('usa',str)==T){
nc_mask <- terra::mask(terra::resample(nc_mask,under_samp),under_samp)
nc_mask[!is.na(nc_mask)] <- 1
#with changes mask
nc_mask0 <-nc_mask
nc_mask0[is.na(nc_mask0)] <- 2
under_samp0 <- under_samp
under_samp0[is.na(under_samp0)] <- 2
c_mask <- under_samp0  - nc_mask0
c_mask[c_mask==0] <- NA
# add those potential AGB loss using the opposite mask of no change and hansen loss pixels
c_mask[!is.na(c_mask)] <- 1
pseudo_loss <- terra::spatSample(c_mask, n, as.points=T, na.rm=T)
#agb10_cci values needed
add_loss <- df[sample(nrow(df), nrow(pseudo_loss)), ]
add_loss$POINT_X <- crds(pseudo_loss)[,1]
add_loss$POINT_Y <- crds(pseudo_loss)[,2]
add_loss$SIZE_HA <- .001
pseudo_loss1 <- Deforested(add_loss, 'D:/GFCFolder')
pseudo_loss1$AGB_T_HA_2018 <- ifelse(pseudo_loss1$defo > 15,
1, pseudo_loss1$AGB_T_HA_SD_2018)
add_loss1 <- subset(pseudo_loss1, pseudo_loss1$defo > 15)
add_loss1 <- add_loss1[,-length(add_loss1)]
add_loss1 <- add_loss1[,-length(add_loss1)]
df <- rbind(df, add_loss1)
plot(c_mask,add=T,col='orange')
# randomly sample 20% of total ref data for no chane
plot(nc_mask,col='green')
pseudo_nc <- terra::spatSample(nc_mask, n,as.points=T, na.rm=T)
plot(pseudo_nc,add=T)
add_nc <- df[sample(nrow(df), nrow(pseudo_nc)), ]
add_nc$AGB_T_HA_2018 <- 2
add_nc$AGB_T_HA_2010 <- 1
add_nc$POINT_X <- crds(pseudo_nc)[,1]
add_nc$POINT_Y <- crds(pseudo_nc)[,2]
df1 <- rbind(df, add_nc)
}
else if (grepl('BRA',str) |grepl('bra',str) ==T){
# add those potential AGB loss using the opposite mask of no change and hansen loss pixels
# Use hansen loss pixels diretly so 2015 onwards can be easily filtered
c_mask <- under_samp
#c_mask[!is.na(c_mask)] <- 1
#c_mask <- aggregate(c_mask, 3, max)
#plot(c_mask, col='red')
#open forest loss vrt
setwd(paste0(dataDir,'/Forest_loss_2000_2020/BRA'))
fl <- crop(rast('floss.vrt'),covs)
fl[fl<15] <- NA
fl[fl>18] <- NA
#sample 1-ha forest loss pixels in under-sampled only
fl1 <- aggregate(fl, 3, mean)
c_mask_fl <- resample(c_mask,fl1)
fl2 <- mask(fl1, c_mask_fl)
pseudo_loss <- as.points(fl2)
n <- round(nrow(df) * 0.1, 0) #10% of total should be added
if(n > nrow(pseudo_loss)){
n<- nrow(pseudo_loss)}
pseudo_loss <- pseudo_loss[sample(nrow(pseudo_loss),n), ]
#format df of new samples
add_loss <- df[sample(nrow(df),n), ]
add_loss$POINT_X <- crds(pseudo_loss)[,1]
add_loss$POINT_Y <- crds(pseudo_loss)[,2]
# add_loss$SIZE_HA <- 1
p <- vect(add_loss, geom=c("POINT_X", "POINT_Y"))
add_loss$AGB_T_HA_2010 <- terra::extract(covs$agb10_cci, p)[[2]]
add_loss$AGB_T_HA_2018 <- 0
add_loss$diffPlt <- add_loss$AGB_T_HA_2018 - add_loss$AGB_T_HA_2010
df1 <- rbind(df, add_loss)
}
else if (grepl('swe',str)==T){
# add those potential AGB loss using the opposite mask of no change and hansen loss pixels
# Use hansen loss pixels diretly so 2015 onwards can be easily filtered
c_mask <- under_samp
c_mask[!is.na(c_mask)] <- 1
c_mask <- aggregate(c_mask, 3, max)
plot(c_mask, col='red')
#open forest loss vrt
setwd(paste0(dataDir,'/Forest_loss_2000_2020/SWE'))
fl <- rast('fheight_loss.vrt')
fl[fl<15] <- NA
fl[fl>18] <- NA
fl1 <- aggregate(fl, 3, max)
fl2 <- mask(resample(fl1,c_mask), c_mask)
pseudo_loss <- as.points(fl2) ########TRY THIS!
pseudo_loss <- pseudo_loss[sample(nrow(pseudo_loss),n), ]
add_loss <- df[sample(nrow(df),n), ]
add_loss$POINT_X <- crds(pseudo_loss)[,1]
add_loss$POINT_Y <- crds(pseudo_loss)[,2]
add_loss$SIZE_HA <- 1
p <- vect(add_loss, geom=c("POINT_X", "POINT_Y"))
add_loss$AGB_T_HA_2010 <- terra::extract(covs$agb10_cci, p)[[2]]
add_loss$AGB_T_HA_2018 <- terra::extract(covs$agb18_cci, p)[[2]]
df1 <- rbind(df, add_loss)
}
setwd(dataDir)
saveRDS(df1, paste0(str,'_pseudo.rds'))
gc()
######### one more AOA ot check changes after pseuod samp --------------
# p <- vect(df1, geom=c("POINT_X", "POINT_Y"))
#  df1$diff_cci <- terra::extract(covs$diff_cci, p)[[2]]
# df1$diff_flux <- terra::extract(covs$diff_flux, p)[[2]]
#  df1.covs <- terra::extract(covs, p)[,-1]
# df1 <- data.frame(df1, df1.covs)
#  df1 <- subset(df1, !is.na(df1$diff_cci))
# df1$flii_envi <- ifelse(is.na(df1$flii_envi), 0, df1$flii_envi)
unregister_dopar()
#df1$diffPlt <- df1$AGB_T_HA_2018 - df1$AGB_T_HA_2010
#dft <- dft[,names(covs)]
model <- train(df1[,which(names(df1) %in% c("diff_cci","diff_flux", "diff_jpl","TC_envi","flii_envi",
"mgmt_mgmt","lcovDiff_LC","forType_envi"))],
df1$diffPlt,method="rf", importance=TRUE,tuneLength = 5,
trControl=trainControl(method="cv",number=5,savePredictions=T))
model
if (file.exists( paste0(str,'_DI1.rds')) == F  ){
DI <- trainDI(model=model)
saveRDS(DI, paste0(str,'_DI1.rds'))
}else{DI <- readRDS(paste0(str,'_DI1.rds'))}
cl <- makeCluster(6)
registerDoParallel(cl)
#covs should be masked!
AOA <- aoa(covs, model = model, trainDI = DI,cl=cl) #saving AOA not working!
stopCluster(cl)
msk <-  AOA$AOA
msk [msk==1] <- NA
under_samp <- terra::mask(covs[[1]],msk)
under_samp[!is.na(under_samp)] <- 1
plot(under_samp, main='Under-sampled areas after adding more data', col='red')
plot(p,add=T)
writeRaster(under_samp, paste0(str, '_underSamp_Pseudo.tif'),overwrite=T)
df1
}
DI
}
## Dissimilarity index for HPC runs of AOA
PseudoSamp(ref, covs, F)
## Function to map under-sampled areas and pseudo-sample "no change" and "loss" data
PseudoSamp <- function(df=usa_ref,covs=covs){
str <- deparse(substitute(covs))
str1 <- deparse(substitute(df))
print(str)
df <- df[, !(colnames(df) %in% c('fmask','defo'))]
df$diffPlt <- df$AGB_T_HA_2018 - df$AGB_T_HA_2010
exc <- c('diff_lvod','flii_envi','mgmt_mgmt', 'TC_envi','height_envi',
'forType_envi', 'diff_jpl','bio_climate','forType_envi')
# use all covs for feature space analysis
p <- vect(df, geom=c("POINT_X", "POINT_Y"))
print(paste(nrow(df), 'total plots'))
df.covs <- terra::extract(covs, p)[,-1]
df <- data.frame(df, df.covs)
print(paste(nrow(df), 'total plots after masking'))
df <- df[, !(colnames(df) %in% exc)]
df <- na.omit(df)
#clustering of ref data
df <- SpatialFolds(df, str)
folds <- CreateSpacetimeFolds(df, spacevar='folds',k=length(unique(df$folds)))
nms <- setdiff(names(covs),exc)
unregister_dopar()
model <- train(df[,which(names(df) %in% nms)],
df$diffPlt, method="rf", importance=TRUE,tuneLength = 5,
trControl = trainControl(method="cv",index=folds$index))
print(model)
DI <- trainDI(model=model)
cl <- makeCluster(6)
registerDoParallel(cl)
AOA <- aoa(covs, model = model, trainDI = DI,cl=cl) #saving AOA not working!
stopCluster(cl)
msk <-  AOA$AOA
msk [msk==1] <- NA
under_samp <- terra::mask(covs[[1]],msk)
under_samp[!is.na(under_samp)] <- 1
plot(under_samp, main='Under-sampled areas', col='red')
plot(p,add=T)
under_samp
}
## Dissimilarity index for HPC runs of AOA
PseudoSamp(ref, covs, F)
## Dissimilarity index for HPC runs of AOA
PseudoSamp(ref, covs)
## Spatial splits for AOA
SpatialFolds <- function(df,str){
set.seed(0)
pt <- df
coordinates(pt) <- ~POINT_X+POINT_Y
crs(pt) <- CRS("+init=epsg:4326")
pt <- SpatialPoints(pt)
n <- 5000 #5 km apart
print(n)
folds <- spatialBlock(speciesData = pt, theRange = n, k = 3,'systematic',
iteration = 2,progress=T)
df$folds <- folds$foldID
df <- df[,-10]
df
}
## Dissimilarity index for HPC runs of AOA
PseudoSamp(ref, covs)
########### GLOBALS ---------------------------
unregister_dopar <- function() {
env <- foreach:::.foreachGlobals
rm(list=ls(name=env), pos=env)
}
## Dissimilarity index for HPC runs of AOA
PseudoSamp(ref, covs)
covs$lcov10_LC
## Mask out non-UNSEEA classes; see Table S3 of paper for reclassification
## using CCI-Land cover dataset
covs_fmask <- covs$lcov10_LC
class1 <- ifel(covs_fmask > 49 & covs_fmask < 70, 1, NA)#Broadleaved
class2 <- ifel(covs_fmask > 69 & covs_fmask < 90, 2, NA)#Coniferous
class3 <- ifel(covs_fmask > 89 & covs_fmask < 110, 3, NA)#Mixed
class4 <- ifel(covs_fmask > 159 & covs_fmask < 181, 4, NA) #Mangroves
class5 <- ifel(covs_fmask > 119 & covs_fmask < 131 |
covs_fmask > 39 & covs_fmask < 50, 5, NA)#Shrubs/Grass
lc <- merge(class1,class2,class3,class4,class5)
mgmt <- covs$mgmt_mgmt
mgmt <- ifel(mgmt > 30, 6, NA) #Plantations that only overlap classes1-3!
fmask <- merge(class1,class2)
mgmt <- mask(mgmt,fmask)
lc <- merge(mgmt,lc)
plot(lc)
lc <- covs$lcov10_LC
class1 <- ifel(lc > 49 & lc < 70, 1, NA)#Broadleaved
class2 <- ifel(lc > 69 & lc < 90, 2, NA)#Coniferous
class3 <- ifel(lc > 89 & lc < 110, 3, NA)#Mixed
class4 <- ifel(lc > 159 & lc < 181, 4, NA) #Mangroves
class5 <- ifel(lc > 119 & lc < 131 |
lc > 39 & lc < 50, 5, NA)#Shrubs/Grass
lc <- merge(class1,class2,class3,class4,class5)
mgmt <- covs$mgmt_mgmt
mgmt <- ifel(mgmt > 30, 6, NA) #Plantations that only overlap classes1-3!
fmask <- merge(class1,class2)
mgmt <- mask(mgmt,fmask)
lc <- merge(mgmt,lc)
plot(lc)
covs_fmask <- mask(covs,lc)
covs_fmask
plot(covs_fmask)
## Function to extract covariates value at plot locations
ExtractVal <- function(plt=val.ldr,covs=covs_phl_unmasked, type='point'){
str <- deparse(substitute(covs))
rsl <- .00088889
plt$Xnew <- rsl * (0.5 + plt$POINT_X %/% rsl)
plt$Ynew <- rsl * (0.5 + plt$POINT_Y %/% rsl)
plt$diffPlt <- plt$AGB_T_HA_2018 - plt$AGB_T_HA_2010
plt$diffSD <- sqrt(plt$AGB_T_HA_SD_2010^2) + sqrt(plt$AGB_T_HA_SD_2018^2)
#final table
plt = plt[,c('POINT_X', 'POINT_Y','AGB_T_HA_2018', 'AGB_T_HA_2010','diffSD', 'diffPlt' )]
plt <- subset(plt, !is.na(plt$AGB_T_HA_2018))
plt <- na.omit(plt)
p <- vect(plt, geom=c("POINT_X", "POINT_Y"))
# extract values
plt <- data.frame(plt, terra::extract(covs,p))
plt <- subset(plt, !is.na(plt$diff_cci))
#assures that data is confined with UN-SEEA classes!
# remove non-forestb based on CCI land cover dataset for now
plt$lcov10_LC <- ifelse (plt$lcov10_LC < 40 | plt$lcov10_LC >130, NA, plt$lcov10_LC)
subset(plt, !is.na(plt$lcov10_LC))
}
## Function to extract covariates value at plot locations
ExtractVal <- function(plt=val.ldr,covs=covs_phl_unmasked){
str <- deparse(substitute(covs))
rsl <- .00088889
plt$diffPlt <- plt$AGB_T_HA_2018 - plt$AGB_T_HA_2010
plt$diffSD <- sqrt(plt$AGB_T_HA_SD_2010^2) + sqrt(plt$AGB_T_HA_SD_2018^2)
plt = plt[,c('POINT_X', 'POINT_Y','AGB_T_HA_2018', 'AGB_T_HA_2010','diffSD', 'diffPlt' )]
plt <- subset(plt, !is.na(plt$AGB_T_HA_2018))
plt <- na.omit(plt)
p <- vect(plt, geom=c("POINT_X", "POINT_Y"))
# extract values
plt <- data.frame(plt, terra::extract(covs,p))
plt <- subset(plt, !is.na(plt$diff_cci))
#assures that data is confined with UN-SEEA classes!
# remove non-forestb based on CCI land cover dataset for now
plt$lcov10_LC <- ifelse (plt$lcov10_LC < 40 | plt$lcov10_LC >130, NA, plt$lcov10_LC)
subset(plt, !is.na(plt$lcov10_LC))
}
## Extract covariates value ----------------------
vt <- ExtractVal(ref, covs_fmask)
vt
head(vt)
hist(vt$POINT_X)
hist(vt$diff_cci)
## Machine learning model fitting and cross validation
XVal <- function(vt){ #runs all model
str <- deparse(substitute(vt))
print(paste('RUNNING:',str))
#exclude these
exc <- c('X','ID','diff_lvod','folds','texMean_flux','texVar_flux','texMean_cci','texVar_cci')
data <- vt[!names(vt) %in% exc]
data <- na.omit(data)
head(data)
#XG --------------------------------------------------
unregister_dopar()
n <- nrow(data)
tune_grid <- expand.grid(nrounds = c(500,1000,2000),
max_depth = 5,
eta = c(0.005,0.01,0.03,0.1,0.5), ####!!! very sensitive #low eta value means model more robust to overfitting but slower to comput
gamma = c(0.01,0.1,0.5),
colsample_bytree = 0.75,
min_child_weight = c(1,5,10),
subsample = 0.5)
#  gbm_mod <- caret::train(diffPlt~ .,  data=data[1:n,-c(1:5)],method='gbm',
#                         trControl= trainControl( method = "cv",number = 5,
#                                                 savePredictions=T,search='random'))
xg_mod <- train(diffPlt ~., data = data[1:n,-c(1:5)], method = "xgbTree",
trControl=trainControl(method = "cv", number = 5,savePredictions = T),
tuneGrid = tune_grid)
#RF --------------------------------------
rf_mod <- caret::train(diffPlt~ .,  data=data[1:n,-c(1:5)],
method='ranger', importance='permutation',
trControl= trainControl( method = "cv",number = 5,savePredictions=T))
####SVM -----------------------------------------
tune_grid <- expand.grid(C=seq(0.1,3,0.1))
svm_mod <- caret::train(diffPlt~ .,  data=data[1:n,-c(1:5)],method='svmLinear',
trControl= trainControl(method = "cv",number = 5,savePredictions=T,
search='random',tuneGrid = tune_grid))
### Make sure training data are independent between base learners and meta learner
pred2 <- svm_mod$pred
tuned <- svm_mod$bestTune
pred2 <- subset(pred2, pred2$C==tuned[1,1])
pred2 <- pred2[order(pred2$rowIndex),]
pred3 <- xg_mod$pred
pred3 <- pred3[order(pred3$rowIndex),]
pred4 <- rf_mod$pred
tuned <- rf_mod$bestTune
pred4 <- subset(pred4, pred4$mtry== tuned[1,1] & pred4$splitrule ==tuned[1,2]&
pred4$min.node.size ==tuned[1,3])
pred4 <- pred4[order(pred4$rowIndex),]
#### Ensemble model ---------------------------------
#ifelse shuffling folds1-5
#input index = cv_folds to train
data1 <- data.frame(pred2$obs, pred2$Resample, #pred1$pred,
pred2$pred, pred3$pred, pred4$pred)
names(data1) <- c('diffPlt','Resample','svmRadial', 'xgbTree','ranger')
data1$Resample <- parse_number(data1$Resample)
data2 <- transform(data1, folds= sample(Resample))
cv_folds <- createFolds(data2$folds,k=5, returnTrain = T)
en_mod <- caret::train(diffPlt~ .,  data=data2[,-c(2,6)],method='ranger',importance='permutation',
trControl=trainControl(method = "cv",5,index=cv_folds, savePredictions=T))
unregister_dopar()
if ("diffSD" %in% colnames(data)){
cw <- 1/ (data$diffSD^2)
}else{cw<-NA}
rf_se <- ranger(diffPlt ~ ., data=data2[,-c(2,6)], quantreg = T, case.weights=cw,
keep.inbag = T,importance='permutation')
setwd(dataDir)
fin <- list(svm_mod,xg_mod,rf_mod,en_mod,rf_se,data)
saveRDS(fin, paste0('Mods_',str,'.rds'))
return(fin)
}
#### Model fitting --------------------------
mods <- XVal(vt)
